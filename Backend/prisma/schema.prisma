generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  name           String
  password       String
  employee_Id    String      @unique
  createdAt      DateTime    @default(now())
  access_level   ACCESSLEVEL @default(VIEW)
  view_detection Boolean     @default(false)
}

model CrowdCount {
  id           Int      @id @default(autoincrement())
  count        Int
  timestamp    DateTime @default(now())
  confidence   Float
  vehicleCount Int?
  cameraId     String
  camera       Camera   @relation(fields: [cameraId], references: [cameraId])
}

model DetectionLog {
  id              Int           @id @default(autoincrement())
  cameraId        String
  metadata        Json?
  trackId         String        @db.VarChar(255)
  camera_ip       String        @db.VarChar(30)
  boxCoords       String?       @db.VarChar(255)
  classConfidence Float
  detectionClass  String        @db.VarChar(20)
  timestamp       DateTime      @default(now())
  bottomColor     String        @db.VarChar(20)
  topColor        String        @db.VarChar(20)
  licenseNumber   String?       @db.VarChar(20)
  incidentType    IncidentType?
  camera          Camera        @relation(fields: [cameraId], references: [cameraId])
}

model OperationLog {
  id                    Int       @id @default(autoincrement())
  operationType         String    @db.VarChar(255)
  initialTimestamp      DateTime
  finalTimestamp        DateTime
  userId                String    @db.VarChar(20)
  closeTimestamp        DateTime?
  operationStatus       Status    @default(ACTIVE)
  operationRequestData  Json?     @db.Json
  operationResponseData Json?     @db.Json
  operationTimestamp    DateTime? @default(now())
  cameras               Camera[]  @relation("OperationCameras")
}

model AnprLogs {
  id                    Int      @id @default(autoincrement())
  camera_ip             String   @db.VarChar(30)
  camera_id             String   @db.VarChar(30)
  time_stamp            DateTime @default(now())
  detection_id          Int
  meta_data             Json?
  license_number        String   @db.VarChar(20)
  prediction_confidence Float
  trackId               String   @db.VarChar(255)
  boxCoords             String?  @db.VarChar(255)
  detectionClass        String   @db.VarChar(20)
  ownerName             String?  @db.VarChar(255)
  camera                Camera   @relation(fields: [camera_id], references: [cameraId])
}

model IncidentLogs {
  id              Int          @id @default(autoincrement())
  timestamp       DateTime     @default(now())
  cameraId        String
  metadata        Json?
  trackId         String       @db.VarChar(255)
  camera_ip       String       @db.VarChar(30)
  boxCoords       String?      @db.VarChar(255)
  incidentType    IncidentType
  modelResolved   Boolean      @default(false)
  modelResolvedAt DateTime?
  userResolved    Boolean      @default(false)
  userResolvedAt  DateTime?
  resolved        Boolean      @default(false)
  resolvedAt      DateTime?    @default(now())
  metaCoords      Float[]
  thumbnail       String?      @db.VarChar(30)
  alerts          Int?
  wrongDetection  Boolean      @default(false)

  camera Camera @relation(fields: [cameraId], references: [cameraId])
}

model DetectionTable {
  id               Int       @id @default(autoincrement())
  custom_track_id  String    @db.VarChar(255)
  camera_id        String    @db.VarChar(30)
  first_appearance DateTime? @default(now())
  last_appearance  DateTime? @default(now())
  dbBox            String    @db.VarChar(255)
  dLabel           String    @db.VarChar(255)
  dConf            String?   @db.VarChar(255)
  pLabel           String?   @db.VarChar(255)
  pConf            String?   @db.VarChar(255)
  camera           Camera    @relation(fields: [camera_id], references: [cameraId])
}

model Camera {
  cameraId              String           @id @db.VarChar(30)
  cameraIp              String           @db.VarChar(30)
  facingAngle           String           @db.VarChar(5)
  location              String           @db.VarChar(50)
  cameraName            String           @db.VarChar(50)
  connectionType        String           @db.VarChar(10)
  cameraType            String           @db.VarChar(10)
  status                Status?
  installed             DateTime?        @db.Timestamptz(6)
  lastOnline            DateTime?        @db.Timestamptz(6)
  coordinates           Json
  manufacturer          String?          @db.VarChar(30)
  routerIp              String?          @db.VarChar(30)
  crowdThreshold        Float?           @default(0)
  areaName              String?          @db.VarChar(255)
  rtspLink              String?          @db.VarChar(255)
  crowdCountThreshold   String?          @db.VarChar(10)
  vehicleCountThreshold String?          @db.VarChar(10)
  illegalParkingCords   Json?
  redlightCrossingCords Json?
  wrongwayCords         Json?
  illegalParkingTimer   Int?

  AnprLogs              AnprLogs[]
  CrowdCount            CrowdCount[]
  DetectionLog          DetectionLog[]
  DetectionTable        DetectionTable[]
  IncidentLogs          IncidentLogs[]
  operations            OperationLog[]   @relation("OperationCameras")
}

model Class {
  id         Int    @id @default(autoincrement())
  className  String @db.VarChar(255)
  objectType String @db.VarChar(255)
}

enum Status {
  ACTIVE
  INACTIVE
}

enum ACCESSLEVEL {
  ADMIN
  WORK
  VIEW
  SERVER
}

enum IncidentType {
  REDLIGHT_VIOLATION
  OVERSPEEDING
  ILLEGAL_PARKING
  WRONG_WAY_DRIVING
  ACCIDENT
  VEHICLE_RESTRICTION
  CROWD_RESTRICTION
  GARBAGE
  POTHOLE
  CATTLE
  WATERLOGGING
  PEEING
  SPITTING
  GARBAGE_LITTERING
}
